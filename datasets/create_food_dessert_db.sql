-- ============================================================
-- 1. Create schema for the new database
-- ============================================================
CREATE SCHEMA IF NOT EXISTS food_desert_db;

-- 2. Set the search_path so all subsequent DDL uses this schema
SET search_path TO food_desert_db;

-- ============================================================
-- 3. Core tables
-- ============================================================

-- 3.1 atl_food_place
-- Note: avg_nutritional_score will be provided as a VIEW, since it is
--       derived from the average of menu_items.nutrition_score.
CREATE TABLE food_desert_db.atl_food_place (
    atl_food_place_id   INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title               VARCHAR(255) NOT NULL UNIQUE,
    slug                VARCHAR(255) NOT NULL UNIQUE,
    categories          VARCHAR(255),   -- e.g., "fast food, vegan"
    lat                 NUMERIC(9,6) NOT NULL,  -- latitude with precision
    lng                 NUMERIC(9,6) NOT NULL,  -- longitude with precision
    created_at          TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_at          TIMESTAMPTZ NOT NULL DEFAULT now()
);

-- 3.2 menu_items
CREATE TABLE food_desert_db.menu_items (
    menu_item_id        INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    atl_food_place_id   INTEGER NOT NULL
                        REFERENCES food_desert_db.atl_food_place(atl_food_place_id)
                        ON DELETE CASCADE,
    title               VARCHAR(255) NOT NULL,
    slug                VARCHAR(255) NOT NULL,
    calories            INTEGER,
    protein_g           NUMERIC(6,2),
    carbs_g             NUMERIC(6,2),
    fat_g               NUMERIC(6,2),
    cholesterol_mg      NUMERIC(8,2),
    sodium_mg           NUMERIC(8,2),
    nutrition_score     NUMERIC(3,2) CHECK (
                          nutrition_score >= 0
                          AND nutrition_score <= 5
                        ),  -- must be between 0 and 5 inclusive
    created_at          TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_at          TIMESTAMPTZ NOT NULL DEFAULT now(),
    CONSTRAINT menu_items_unique_slug_per_place UNIQUE (atl_food_place_id, slug)
);

-- ============================================================
-- 4. Derived View for Average Nutritional Score per Place
-- ============================================================
-- This view computes the average nutrition_score for each food place.
CREATE OR REPLACE VIEW food_desert_db.vw_atl_food_place_avg_score AS
SELECT
    p.atl_food_place_id,
    p.title,
    p.slug,
    p.categories,
    p.lat,
    p.lng,
    ROUND(AVG(m.nutrition_score)::numeric, 2) AS avg_nutritional_score,
    p.created_at,
    p.updated_at
FROM food_desert_db.atl_food_place p
LEFT JOIN food_desert_db.menu_items m
       ON p.atl_food_place_id = m.atl_food_place_id
GROUP BY p.atl_food_place_id, p.title, p.slug, p.categories, p.lat, p.lng,
         p.created_at, p.updated_at;

-- ============================================================
-- 5. Trigger function to auto-update updated_at on any row change
-- ============================================================
CREATE OR REPLACE FUNCTION set_updated_at() RETURNS trigger AS $$
BEGIN
    NEW.updated_at := now();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Attach triggers to both tables
DROP TRIGGER IF EXISTS atl_food_place_set_updated_at ON food_desert_db.atl_food_place;
CREATE TRIGGER atl_food_place_set_updated_at
BEFORE UPDATE ON food_desert_db.atl_food_place
FOR EACH ROW
EXECUTE FUNCTION set_updated_at();

DROP TRIGGER IF EXISTS menu_items_set_updated_at ON food_desert_db.menu_items;
CREATE TRIGGER menu_items_set_updated_at
BEFORE UPDATE ON food_desert_db.menu_items
FOR EACH ROW
EXECUTE FUNCTION set_updated_at();

-- Helpful index
CREATE INDEX IF NOT EXISTS menu_items_place_id_idx
  ON food_desert_db.menu_items (atl_food_place_id);
